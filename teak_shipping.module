<?php

/**
 * @file
 * Defines an example shipping method for testing and development.
 */

/**
 * Implements hook_commerce_price_component_type_info().
 */
function teak_shipping_commerce_price_component_type_info() {
  return array(
    'teak_shipping_service_express' => array(
      'title' => t('Express delivery'),
      'weight' => 20,
    ),
  );
}

/**
 * Implements hook_commerce_shipping_method_info().
 */
function teak_shipping_commerce_shipping_method_info() {
  $shipping_methods = array();

  $shipping_methods['teak_shipping_method'] = array(
    'title' => t('Teak shipping method'),
    'description' => t('Defines a single flat rate service with a couple of service details.'),
  );

  return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function teak_shipping_commerce_shipping_service_info() {
  $shipping_services = array();

  $shipping_services['teak_shipping_service'] = array(
    'title' => t('Teak shipping service'),
    'description' => t('A $20 flat rate service with express delivery available for an additional $15.'),
    'display_title' => t('Shipping'),
    'shipping_method' => 'teak_shipping_method',
    'price_component' => 'shipping',
    'callbacks' => array(
      'rate' => '_teak_shipping_rate',
      #'details_form' => 'teak_shipping_service_details_form',
      #'details_form_validate' => 'teak_shipping_service_details_form_validate',
      #'details_form_submit' => 'teak_shipping_service_details_form_submit',
    ),
  );

  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function _teak_shipping_rate($shipping_service, $order) {

  // Start with empty cost.
  $cost = array(
    'amount' => 0,
    'currency_code' => 'EUR',
    'data' => array(),
  );

  $amount = $order->commerce_order_total['und'][0]['amount'];

  // Get the address
  $address = _teak_shipping_address($order);
  if (empty($address)) {
    dpm("No address found.");
    return $cost;
  }
  dpm($address);

  // Geocode
  $parsed = geocoder_widget_parse_addressfield($address);
  $point = geocoder('google', $parsed);
  if (empty($point)) {
    dpm("Unable to geocode.");
    return $cost;
  }

  // Distance calculation
  $distance = _teak_shipping_distance($point);
  $km = $distance * 0.001;
  dpm($distance, '$distance (in meters)');

  // More about the order.
  dpm($order);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $shipping = $order_wrapper->commerce_customer_shipping;

  if (!empty($shipping->field_afhalen_of_leveren)) {
    $ship_collect = $shipping->field_afhalen_of_leveren->value();
    if ('afhalen' === $ship_collect) {
      // Shipping is free.
      dpm('afhalen');
      return $cost;
    }
  }

  switch ($address['country']) {

    case 'DE':
      dpm("DE, $km km, $amount EUR");
      if ($amount < 60000) {
        dpm("Minimum order 600 EUR.");
        return $cost;
      }
      if ($km <= 50) {
        $cost = ($amount >= 150000) ? 0 : 5000;
      }
      elseif ($km <= 100) {
        $cost = ($amount >= 175000) ? 0 : 9000;
      }
      elseif ($km <= 150) {
        $cost = ($amount >= 200000) ? 0 : 12500;
      }
      elseif ($km <= 275) {
        $cost = ($amount >= 250000) ? 0 : 15000;
      }
      else {
        // Stammann transport
        $cost = _teak_shipping_rate_stammann($order);

        // Stammann discount
        if ($amount >= 500000) {
          $cost = 0;
        }
        elseif ($amount >= 450000) {
          $cost -= 37500;
        }
        elseif ($amount >= 400000) {
          $cost -= 32500;
        }
        elseif ($amount >= 350000) {
          $cost -= 27500;
        }
        elseif ($amount >= 300000) {
          $cost -= 22500;
        }
        elseif ($amount >= 250000) {
          $cost -= 17500;
        }
        elseif ($amount >= 200000) {
          $cost -= 12500;
        }

        // Make sure that transport cost is not below zero.
        if ($cost < 0) {
          $cost = 0;
        }
      }
      break;

    case 'NL':
      if ($amount >= 150000) {
        // Shipping is free.
        break;
      }
      if (!empty($shipping->field_provincie)) {
        $cost = $shipping->field_provincie->field_bezorgkosten->value();
      }
      break;

    default:
      dpm("Country not supported.");
  }

  return $cost;
}

function _teak_shipping_rate_stammann($order) {
  $cost = 0;
  foreach (field_get_items('commerce_order', $order, 'commerce_line_items') as $line_item) {
    $line_item = commerce_line_item_load($line_item['line_item_id']);
    foreach (field_get_items('commerce_line_item', $line_item, 'commerce_product') as $product) {
      $product = commerce_product_load($product['product_id']);
      $cost += _teak_shipping_rate_stammann_product($product);
    }
  }
  return
    ($cost < 150) ? 150 : (
    ($cost > 400) ? 400 : (
    $cost
  ));
}

function _teak_shipping_rate_stammann_product($product) {
  foreach (field_get_items('commerce_product', $product, 'taxonomy_vocabulary_1') as $term) {
    $term = taxonomy_term_load($term['tid']);
    switch ($term->name) {
      case 'Teak Tische':
        return 15000;
      case 'Teak Stühle':
        return 3500;
      case 'Teak Schränke':
        return 25000;
      case 'Teak Sideboards':
        return 12500;
      case 'Teak Gartenmöbel':
        return 20000;
    }
  }
}

/**
 * Get the shipping address for an order.
 *
 * @return float
 *   Distance in meters
 */
function _teak_shipping_address($order) {

  // field_get_items() feels awkward.
  foreach (field_get_items('commerce_order', $order, 'commerce_customer_shipping') as $profile_item) {
    $profile = commerce_customer_profile_load($profile_item['profile_id']);
    if ($profile) {
      foreach (field_get_items('commerce_customer_profile', $profile, 'commerce_customer_address') as $address) {
        return $address;
      }
    }
  }
}

/**
 * Calculate the shipping distance from Nuth.
 */
function _teak_shipping_distance($point) {
  // Coordinates of Nuth, NL
  $home = array(5.8820282, 50.9217535);
  return _teak_shipping_haversine($home, $point->coords);
}

/**
 * Calculate distance between two geographical points.
 * See http://rosettacode.org/wiki/Category:PHP
 *
 * In theory, geoPHP should be able to do the distance calculation, but it is
 * not as easy as expected. Somehow didn't work. So we roll our own.
 *
 * Note: geoPHP has LNG first, LAT second.
 *
 * @param array $p0
 *   LNG and LAT of the first point, in degree.
 * @param array $p1
 *   LNG and LAT of the second point, in degree.
 *
 * @return float
 *   Distance in meters
 */
function _teak_shipping_haversine($p0, $p1) {

  // Earth's radius in meters.
  $radiusOfEarth = 6371000;

  // Conversion to rad
  $p0[0] = deg2rad($p0[0]);
  $p0[1] = deg2rad($p0[1]);
  $p1[0] = deg2rad($p1[0]);
  $p1[1] = deg2rad($p1[1]);

  $diffLongitude = $p1[0] - $p0[0];
  $diffLatitude = $p1[1] - $p0[1];

  $a = 0
    + 1
      * sin($diffLatitude / 2)
      * sin($diffLatitude / 2)
    + 1
      * cos($p0[1])
      * cos($p1[1])
      * sin($diffLongitude / 2)
      * sin($diffLongitude / 2)
  ;

  $b = 2 * asin(sqrt($a));

  return $radiusOfEarth * $b;
}
